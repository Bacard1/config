#!/bin/bash
echo "üöÄ Creating Android TV PowerTools Suite..."

# –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
mkdir -p ~/tv_powertools
cd ~/tv_powertools

echo "üìÅ Creating scripts in: $(pwd)"

## 1. üõ°Ô∏è TV HEALTH GUARDIAN
cat > tv_health.sh << 'EOF'
#!/bin/bash
# üõ°Ô∏è –†–ï–ê–õ–ï–ù –ú–û–ù–ò–¢–û–†–ò–ù–ì –ù–ê TV –ó–î–†–ê–í–ï - –ó–ê–î–™–õ–ñ–ò–¢–ï–õ–ï–ù!
echo "=== üõ°Ô∏è TV HEALTH GUARDIAN ==="

# –°–∏—Å—Ç–µ–º–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo "üì∫ Model: $(adb shell getprop ro.product.model)"
echo "ü§ñ Android: $(adb shell getprop ro.build.version.release)"

# –ü–∞–º–µ—Ç –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
MEMORY=$(adb shell free -m | grep Mem: | awk '{print $4}')
STORAGE=$(adb shell df -h /data | tail -1 | awk '{print $4}')
echo "üß† Memory: ${MEMORY}MB free"
echo "üíæ Storage: ${STORAGE} free"

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
TEMP=$(adb shell cat /sys/class/thermal/thermal_zone*/temp 2>/dev/null | head -1)
if [ -n "$TEMP" ]; then
    TEMP_C=$((TEMP/1000))
    echo "üå°Ô∏è Temperature: ${TEMP_C}¬∞C"
fi

# –ú—Ä–µ–∂–æ–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
IP=$(adb shell ip addr show wlan0 2>/dev/null | grep 'inet ' | awk '{print $2}' | cut -d/ -f1)
if [ -n "$IP" ]; then
    echo "üåê IP Address: $IP"
    echo "üîó Connect via: ssh -p 8022 $IP"
fi

# –ë–∞—Ç–µ—Ä–∏—è (–∞–∫–æ –µ –ø—Ä–∏–ª–æ–∂–∏–º–æ)
BATTERY=$(termux-battery-status 2>/dev/null | grep percentage | cut -d: -f2 | tr -d ' ,')
if [ -n "$BATTERY" ]; then
    echo "üîã Battery: ${BATTERY}%"
fi
EOF

## 2. üéÆ ADB MASTER CONTROLLER
cat > adb_master.sh << 'EOF'
#!/bin/bash
# üéÆ –ü–™–õ–ï–ù –ö–û–ù–¢–†–û–õ –ù–ê TV –ü–†–ï–ó ADB - –ó–ê–î–™–õ–ñ–ò–¢–ï–õ–ï–ù!
echo "=== üéÆ ADB MASTER CONTROLLER ==="

if [ $# -eq 0 ]; then
    echo "‚ùå Usage: $0 {screen|install apk|uninstall package|reboot|apps|info}"
    echo ""
    echo "Examples:"
    echo "  $0 screen                    - üì∏ Take screenshot"
    echo "  $0 install /sdcard/app.apk   - üì¶ Install app"
    echo "  $0 uninstall com.example.app - üóëÔ∏è Remove app"
    echo "  $0 reboot                    - üîÉ Reboot TV"
    echo "  $0 apps                      - üì± List user apps"
    echo "  $0 info                      - ‚ÑπÔ∏è System info"
    exit 1
fi

case $1 in
    "screen")
        FILENAME="screen_$(date +%Y%m%d_%H%M%S).png"
        adb exec-out screencap -p > "$FILENAME"
        echo "üì∏ Screenshot saved: $FILENAME"
        ;;
    "install")
        if [ -n "$2" ]; then
            adb install -r "$2"
            echo "üì¶ App installed: $2"
        else
            echo "‚ùå Please specify APK file"
        fi
        ;;
    "uninstall")
        if [ -n "$2" ]; then
            adb uninstall "$2"
            echo "üóëÔ∏è App removed: $2"
        else
            echo "‚ùå Please specify package name"
        fi
        ;;
    "reboot")
        adb reboot
        echo "üîÉ Rebooting TV..."
        ;;
    "apps")
        echo "üì± User installed apps:"
        adb shell pm list packages -3 | sed 's/package://g'
        ;;
    "info")
        echo "üìä Device Information:"
        adb shell getprop ro.product.model
        adb shell getprop ro.build.version.release
        ;;
    *)
        echo "‚ùå Unknown command: $1"
        ;;
esac
EOF

## 3. üîÑ SYSTEM AUTO-UPDATER
cat > system_updater.sh << 'EOF'
#!/bin/bash
# üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ê –ê–ö–¢–£–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ê –¶–Ø–õ–ê–¢–ê –°–ò–°–¢–ï–ú–ê - –ó–ê–î–™–õ–ñ–ò–¢–ï–õ–ï–ù!
echo "=== üîÑ SYSTEM AUTO-UPDATER ==="

echo "üïê Start time: $(date)"

echo ""
echo "üì¶ Updating Termux packages..."
pkg update && pkg upgrade -y

echo ""
echo "üêç Updating Python packages..."
if command -v pip &> /dev/null; then
    pip install --upgrade pip 2>/dev/null
    pip install --upgrade yt-dlp 2>/dev/null
    echo "‚úÖ Python packages updated"
else
    echo "‚ö†Ô∏è pip not available"
fi

echo ""
echo "üêß Checking Debian environment..."
if command -v proot-distro &> /dev/null && proot-distro list | grep -q debian; then
    echo "üîÑ Updating Debian packages..."
    proot-distro login debian -- apt update && apt upgrade -y
    echo "‚úÖ Debian updated"
else
    echo "‚ö†Ô∏è Debian not installed"
fi

echo ""
echo "üßπ Cleaning up..."
pkg clean
echo "‚úÖ Cleanup complete"

echo ""
echo "üïê End time: $(date)"
echo "‚úÖ System update complete!"
EOF

## 4. üì° NETWORK INTELLIGENCE
cat > network_intel.sh << 'EOF'
#!/bin/bash
# üì° –¶–Ø–õ–û–°–¢–ï–ù –ú–†–ï–ñ–û–í –ê–ù–ê–õ–ò–ó - –ü–†–ï–ü–û–†–™–ß–ò–¢–ï–õ–ï–ù!
echo "=== üì° NETWORK INTELLIGENCE ==="

# TV –º—Ä–µ–∂–æ–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo "üîç Gathering network information..."

TV_IP=$(adb shell ip addr show wlan0 2>/dev/null | grep 'inet ' | awk '{print $2}' | cut -d/ -f1)

if [ -n "$TV_IP" ]; then
    echo "üì∫ TV IP Address: $TV_IP"
    
    # Gateway
    GATEWAY=$(adb shell ip route | grep default | awk '{print $3}')
    echo "üö™ Gateway: $GATEWAY"
    
    # DNS
    echo "üì° DNS Servers:"
    adb shell getprop | grep net.dns | head -2
    
    # –°–∫–∞–Ω–∏—Ä–∞–Ω–µ –Ω–∞ –º—Ä–µ–∂–∞—Ç–∞
    NETWORK=$(echo $TV_IP | cut -d. -f1-3)
    echo ""
    echo "üîç Scanning network ${NETWORK}.0/24 for active devices..."
    
    # –ë—ä—Ä–∑–æ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ
    count=0
    for i in {1..50}; do
        if ping -c 1 -W 1 ${NETWORK}.$i &>/dev/null; then
            echo "üü¢ ${NETWORK}.$i - Active"
            count=$((count + 1))
        fi
    done
    echo "üìä Found $count active devices in range 1-50"
else
    echo "‚ùå TV not connected to WiFi or ADB not available"
fi

# –ü–æ—Ä—Ç–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
echo ""
echo "üîí Checking open ports on TV..."
adb shell netstat -tulpn 2>/dev/null | grep -E ":(80|443|22|5555)" | head -10 || echo "‚ö†Ô∏è Cannot check ports"
EOF

## 5. üé• SMART MEDIA DOWNLOADER
cat > media_master.sh << 'EOF'
#!/bin/bash
# üé• –ò–ù–¢–ï–õ–ò–ì–ï–ù–¢–ï–ù –ú–ï–î–ò–ï–ù –ú–ï–ù–ò–î–ñ–™–† - –ü–†–ï–ü–û–†–™–ß–ò–¢–ï–õ–ï–ù!
echo "=== üé• SMART MEDIA DOWNLOADER ==="

URL=$1
QUALITY=${2:-"best"}

if [ -z "$URL" ]; then
    echo "‚ùå Usage: $0 <YouTube_URL> [quality]"
    echo ""
    echo "Quality examples:"
    echo "  best                  - –ù–∞–π-–¥–æ–±—Ä–æ –∫–∞—á–µ—Å—Ç–≤–æ"
    echo "  worst                 - –ù–∞–π-–ª–æ—à–æ –∫–∞—á–µ—Å—Ç–≤–æ"
    echo "  bestvideo[height<=720] - HD –≥–æ—Ç–æ–≤–æ –∑–∞ TV"
    echo "  bestaudio             - –°–∞–º–æ –∞—É–¥–∏–æ"
    echo ""
    echo "Example: $0 'https://youtube.com/watch?v=xxx' 'bestvideo[height<=720]'"
    exit 1
fi

echo "üì• Downloading: $URL"
echo "üé¨ Quality: $QUALITY"
echo "‚è≥ This may take a while..."

# –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
mkdir -p ~/storage/downloads/tv_media

# –°–≤–∞–ª—è–Ω–µ —Å yt-dlp
yt-dlp -f "$QUALITY" \
       -o "~/storage/downloads/tv_media/%(title).100s.%(ext)s" \
       --add-metadata \
       --no-overwrites \
       "$URL"

if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ Download successful!"
    echo "üìÅ Location: ~/storage/downloads/tv_media/"
    echo "üíæ Files:"
    ls -la ~/storage/downloads/tv_media/* | tail -5
else
    echo "‚ùå Download failed! Check the URL and connection."
fi
EOF

## 6. üöÄ PERFORMANCE BOOSTER
cat > performance_boost.sh << 'EOF'
#!/bin/bash
# üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ù–ê TV –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–ù–û–°–¢ - –ü–†–ï–ü–û–†–™–ß–ò–¢–ï–õ–ï–ù!
echo "=== üöÄ PERFORMANCE BOOSTER ==="

echo "üîç Checking current performance..."
MEM_BEFORE=$(adb shell free -m | grep Mem: | awk '{print $4}')
echo "üß† Available memory before: ${MEM_BEFORE}MB"

echo ""
echo "üßπ Clearing app caches..."
CACHE_APPS=(
    "com.netflix.ninja"
    "com.amazon.firetv.youtube" 
    "com.google.android.youtube.tv"
    "com.spotify.music"
    "com.hulu.plus"
)

for app in "${CACHE_APPS[@]}"; do
    if adb shell pm list packages | grep -q "$app"; then
        adb shell pm clear "$app"
        echo "‚úÖ Cleared cache: $app"
    fi
done

echo ""
echo "üóëÔ∏è Removing temporary files..."
adb shell rm -rf /data/local/tmp/* 2>/dev/null
adb shell rm -rf /cache/* 2>/dev/null
echo "‚úÖ Temp files cleaned"

echo ""
echo "üîß Restarting system UI..."
adb shell am force-stop com.android.systemui
sleep 2
adb shell input keyevent KEYCODE_HOME
echo "‚úÖ UI restarted"

echo ""
echo "üìä Performance report:"
MEM_AFTER=$(adb shell free -m | grep Mem: | awk '{print $4}')
echo "üß† Available memory after: ${MEM_AFTER}MB"
echo "üìà Memory freed: $((MEM_AFTER - MEM_BEFORE))MB"

echo ""
echo "‚úÖ Performance optimization complete!"
EOF

## 7. üìä SYSTEM REPORT GENERATOR
cat > system_report.sh << 'EOF'
#!/bin/bash
# üìä –î–ï–¢–ê–ô–õ–ï–ù –°–ò–°–¢–ï–ú–ï–ù –û–¢–ß–ï–¢ - –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–ù
echo "=== üìä SYSTEM REPORT GENERATOR ==="

REPORT_FILE="tv_system_report_$(date +%Y%m%d_%H%M%S).txt"

{
echo "=========================================="
echo "       ANDROID TV SYSTEM REPORT"
echo "=========================================="
echo "Generated: $(date)"
echo ""

echo "üì± DEVICE INFORMATION:"
echo "----------------------"
adb shell getprop ro.product.manufacturer
adb shell getprop ro.product.model
adb shell getprop ro.product.device
adb shell getprop ro.build.version.release
adb shell getprop ro.build.version.sdk
echo ""

echo "üíæ STORAGE INFORMATION:"
echo "----------------------"
adb shell df -h
echo ""

echo "üß† MEMORY INFORMATION:"
echo "----------------------"
adb shell free -m
echo ""

echo "üåê NETWORK INFORMATION:"
echo "----------------------"
adb shell ip addr show wlan0 2>/dev/null | grep 'inet ' | awk '{print "IP Address: "$2}'
adb shell netstat -tulpn 2>/dev/null | grep LISTEN | head -10
echo ""

echo "üì¶ INSTALLED APPLICATIONS (User):"
echo "----------------------"
adb shell pm list packages -3 | sed 's/package://g' | head -20
echo ""

echo "üî• SYSTEM TEMPERATURE:"
echo "----------------------"
adb shell cat /sys/class/thermal/thermal_zone*/temp 2>/dev/null | head -3 | while read temp; do
    echo "$((temp/1000))¬∞C"
done

} > "$REPORT_FILE"

echo "‚úÖ System report saved: $REPORT_FILE"
echo "üìÑ Content preview:"
head -20 "$REPORT_FILE"
EOF

## 8. üîí SECURITY AUDITOR
cat > security_audit.sh << 'EOF'
#!/bin/bash
# üîí –ü–†–û–í–ï–†–ö–ê –ù–ê –°–ò–ì–£–†–ù–û–°–¢–¢–ê - –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–ù
echo "=== üîí SECURITY AUDITOR ==="

echo "üîç Checking ADB debugging status..."
ADB_STATUS=$(adb shell settings get global adb_enabled 2>/dev/null)
echo "üì± ADB Debugging: $ADB_STATUS"

echo ""
echo "üåê Checking network connections..."
echo "üì° Listening ports:"
adb shell netstat -tulpn 2>/dev/null | grep LISTEN | head -15

echo ""
echo "üîì Checking installed apps..."
echo "‚ö†Ô∏è Potentially dangerous apps (user installed):"
adb shell pm list packages -3 | sed 's/package://g' | grep -E "(debug|test|root|admin)" || echo "‚úÖ No suspicious apps found"

echo ""
echo "üì± App permissions audit..."
echo "üîê Apps with dangerous permissions:"
adb shell dumpsys package | grep -A2 "android.permission.INTERNET" | grep "Package" | head -10

echo ""
echo "üîí Security recommendations:"
if [ "$ADB_STATUS" = "1" ]; then
    echo "‚ùå ADB debugging is ENABLED - consider disabling in production"
else
    echo "‚úÖ ADB debugging is disabled - good for security"
fi

echo ""
echo "‚úÖ Security audit complete!"
EOF

## 9. üèóÔ∏è INSTALLATION SCRIPT
cat > install_packages.sh << 'EOF'
#!/bin/bash
# üèóÔ∏è –ò–ù–°–¢–ê–õ–ò–†–ê–ù–ï –ù–ê –í–°–ò–ß–ö–ò –ù–ï–û–ë–•–û–î–ò–ú–ò –ü–ê–ö–ï–¢–ò
echo "üöÄ Installing Android TV PowerTools Packages..."

echo "üïê Start time: $(date)"

echo ""
echo "üì¶ Updating package lists..."
pkg update && pkg upgrade -y

echo ""
echo "üîß Installing core system packages..."
pkg install -y python nodejs git wget curl openssh

echo ""
echo "üé¨ Installing media packages..."
pkg install -y ffmpeg vim htop neofetch

echo ""
echo "üåê Installing network tools..."
pkg install -y nmap net-tools dnsutils tcpdump openssl

echo ""
echo "üì∫ Installing TV-specific packages..."
pkg install -y yt-dlp python3 pip jq xmlstarlet termux-api

echo ""
echo "üõ†Ô∏è Installing additional tools..."
pkg install -y termux-tools termux-services termux-exec proot root-repo x11-repo

echo ""
echo "üêß Installing Debian environment..."
pkg install -y proot-distro
proot-distro install debian

echo ""
echo "üì¶ Installing Debian packages..."
proot-distro login debian -- apt update && apt upgrade -y
proot-distro login debian -- apt install -y adb android-tools-adb scrcpy vlc

echo ""
echo "üßπ Final cleanup..."
pkg clean

echo ""
echo "üïê End time: $(date)"
echo "=========================================="
echo "‚úÖ Installation complete!"
echo "üìÅ Scripts location: ~/tv_powertools/"
echo "üéØ Run: cd ~/tv_powertools && ./tv_health.sh"
echo "=========================================="
EOF

## 10. üéØ QUICK START SCRIPT
cat > quick_start.sh << 'EOF'
#!/bin/bash
# üéØ –ë–™–†–ó –°–¢–ê–†–¢ –ó–ê ANDROID TV POWERTOOLS
echo "=== üéØ ANDROID TV POWERTOOLS - QUICK START ==="

echo ""
echo "üìã Available scripts:"
echo "----------------------"
echo "1. üõ°Ô∏è  tv_health.sh       - System health check"
echo "2. üéÆ  adb_master.sh      - ADB remote control" 
echo "3. üîÑ  system_updater.sh  - Update all packages"
echo "4. üì°  network_intel.sh   - Network analysis"
echo "5. üé•  media_master.sh    - Media downloader"
echo "6. üöÄ  performance_boost.sh - Performance optimization"
echo "7. üìä  system_report.sh   - System report"
echo "8. üîí  security_audit.sh  - Security check"
echo "9. üèóÔ∏è  install_packages.sh - Install all packages"

echo ""
echo "üöÄ Quick commands:"
echo "----------------------"
echo "üîç Check TV health:    ./tv_health.sh"
echo "üì∏ Take screenshot:    ./adb_master.sh screen"
echo "üîÑ Update system:      ./system_updater.sh"
echo "üì° Scan network:       ./network_intel.sh"
echo "üé• Download video:     ./media_master.sh 'URL'"
echo "üöÄ Boost performance:  ./performance_boost.sh"

echo ""
echo "üìñ First time setup:"
echo "----------------------"
echo "1. Run: ./install_packages.sh"
echo "2. Connect TV via ADB: adb connect TV_IP:5555"
echo "3. Check connection: ./tv_health.sh"
echo "4. Enjoy! üéâ"

echo ""
echo "‚ùì Help:"
echo "----------------------"
echo "All scripts have built-in help: ./script_name.sh"
echo "Check Termux FAQ: https://wiki.termux.com"
EOF

# –ù–∞–ø—Ä–∞–≤–∞ –Ω–∞ –≤—Å–∏—á–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤–µ –∏–∑–ø—ä–ª–Ω–∏–º–∏
chmod +x *.sh

echo ""
echo "=========================================="
echo "‚úÖ Android TV PowerTools Suite Created!"
echo "=========================================="
echo "üìÅ Location: $(pwd)"
echo "üìä Total scripts: $(ls *.sh | wc -l)"
echo ""
echo "üìã Created scripts:"
ls -la *.sh
echo ""
echo "üöÄ To get started:"
echo "   cd ~/tv_powertools"
echo "   ./quick_start.sh"
echo "   ./install_packages.sh"
echo "=========================================="